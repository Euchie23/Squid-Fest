#APPENDING FUTURE BATCHES TO MAKE ONE EXTRACTION RESULTS FILE
Final_res = "Results/Final_HMresults_mgkg.csv"
write.table(ext_res7.7, file = Final_res, sep = ",",
append = TRUE, quote = FALSE,
col.names = TRUE, row.names = FALSE) #CHANGE COLUMN NAMES TO FALSE AFTER PROCESSING FIRST BATCH
return( list(Results=ext_res7.7,squid_catch_data=binfo, distance_to_land=dtl1))
}
# STEP 5: RUNNING MAIN FUNCTION WITH REQUIRED DATASETS----
heavy_metals_concentration_dataset <- preprocessed_heavy_metals_concentration_dataset(standard_concentration, dry_weight, squid_info, distance_to_land)
# STEP 4: ACTIVATING MAIN FUNCTION TO BE USED FOR CONCENTRATION DATASET MANIPULATION----
#In this process the concentrations for the squid samples are calculated and classified with the help of the standard concentration from the previous functions and also the corresponding dry weight, squid catch data and distance to land datasets
preprocessed_heavy_metals_concentration_dataset <- function(data_list, dry_weight, squid_info, distance_to_land) {
#loading raw data for dry weight of samples... CHANGE BASED ON THE YEAR YOU ARE PROCESSING
dry_weight <-dry_weight
#SQUID CATCH DATA...CHANGE BASED ON THE YEAR YOU ARE PROCESSING
bi<- squid_info
#distance to Argentina and Falkland Islands.distance to land (dtl)
dtl<- distance_to_land
# results from previous function
results <- data_list$results
std_conc <- data_list$standard_concentration
# data cleaning and manipulation for concentration dataset
ext_res0 <- results[grep("ample", results[,1]), ]
ext_res0= ext_res0[-grep("ash", ext_res0[,3]), ]# To remove rows showing wash cycle
ext_res0 = rbind(results[c(1:2),], ext_res0)
ext_res0 = ext_res0[,c(-1,-2)]
ext_res1 <- matrix(unlist(ext_res0), ncol = ncol(ext_res0))
#column names with CPS RSD column
ext_rows_CPS<- data.frame(ext_res1[c(1:3),])
ext_rows_CPS[2,1]<-'ID'
colnames(ext_rows_CPS) <- ext_rows_CPS[2,]
ext_rows_CPS <- ext_rows_CPS[-2,]
ext_rows_CPS[,'DW']=NA
ext_rows_CPS = ext_rows_CPS[,c(1, 32, 2:31)]
colnames(ext_rows_CPS)[2] <- paste("DW")
colnames(ext_rows_CPS)[seq(5,ncol(ext_rows_CPS),3)] <- paste("(CPS_RSD)")
colnames(ext_rows_CPS)[seq(3,ncol(ext_rows_CPS),3)] <- paste("(Conc_ppb)")
colnames(ext_rows_CPS)[seq(4,ncol(ext_rows_CPS),3)] <- paste("(Avg.intensity)")
#column names with Conc_mg/kg column
ext_rows_Conc<- data.frame(ext_res1[c(1:3),])
ext_rows_Conc[2,1]<-'ID'
colnames(ext_rows_Conc) <- ext_rows_Conc[2,]
ext_rows_Conc <- ext_rows_Conc[-2,]
ext_rows_Conc[,'DW']=NA
ext_rows_Conc = ext_rows_Conc[,c(1, 32, 2:31)]
colnames(ext_rows_Conc)[seq(5,ncol(ext_rows_Conc),3)] <- paste("(Conc_mg/kg)")
colnames(ext_rows_Conc)[seq(3,ncol(ext_rows_Conc),3)] <- paste("(Conc_ppb)")
colnames(ext_rows_Conc)[seq(4,ncol(ext_rows_Conc),3)] <- paste("(Avg.intensity)")
#EXTRACTION RESULTS OF SAMPLES FOR DATA MANIPULATION
ext_res2 <- as.data.frame(tibble(matrix(as.numeric(ext_res1[c(3:nrow(ext_res1)),c(2:ncol(ext_res1))]), ncol = ncol(ext_res1)-1))) #take batch control as well in this
ext_res3 <- round(ext_res2, digits = 4)
names(ext_res3) <-NULL
ext_cols<-data.frame(ext_res1[-c(1:3),1])
ext_res4 <- data.frame(ext_res3)
ext_res4 = ext_res4[-1,]
ext_res4.1 = cbind(ext_cols, ext_res4)
colnames(ext_res4.1)[1] <- 'ID'
ext_res4.1$ID = gsub("-", "_", ext_res4.1$ID)
ext_res4.1$DW<- NA
ext_res4.1$ID = tolower(ext_res4.1$ID)
# #FUNCTIONS TO HELP MODIFY SAMPLE NAMES in concentration dataset
rw <- apply(ext_res4.1, MARGIN = 1, sample_area_concentration_dataset)
rw1<- apply(t(rw), MARGIN = 1, sample_id_concentration_dataset)
ext_res4.1.1 <- data.frame(t(rw1))
# ADDING DRY WEIGHT DATA TO CONCENTRATION DATASET
HM.1 <- dry_weight
HM.2 <-data.frame(HM.1)
if(colnames(dry_weight)[ncol(dry_weight)]!= "Ink.sac..mg."){
colnames(HM.2) <- c("ID","s","l","m")
}else{
colnames(HM.2) <- c("ID","s","l","m","i")
}
HM.3<-data.frame(t(apply(HM.2,1, sample_id_dry_weight)))
HM.3$ID <- gsub("-", "_", HM.3$ID)
# #ADDING DRY WEIGHT TO EXTRACTION RESULTS DATAFRAME FROM SAMPLE SEPARATION DATASET
ext_res4.2 <- add_dry_weight(ext_res4.1.1,HM.3 )
ext_res4.2 <- ext_res4.2 %>% relocate(DW, .after = ID)
colnames(ext_res4.2) <- colnames(ext_rows_CPS)
#adding back batch-control row to dataframe
ext_res5 <- data.frame(rbind(ext_rows_CPS, ext_res4.2))
colnames(ext_res5) <- colnames(ext_rows_CPS)
#CONCENTRATION CALCULATIONS
#MAKING COLUMNS NUMERIC AGAIN
ext_res6.2 <- matrix(unlist(ext_res5), ncol = ncol(ext_res5))
ext_res6.3 <- data.frame(matrix(as.numeric(ext_res6.2[c(2:nrow(ext_res6.2)),c(2:ncol(ext_res6.2))]), ncol = ncol(ext_res6.2)-1))
ext_res6.4 <- cbind(ext_res5[-1,1], ext_res6.3)
colnames(ext_res6.4) <- colnames(ext_res5)
# MAKING DATASET INTO LONG FORMAT FOR CALCULATIONS
ext_res6.5<- data.frame(matrix(nrow = 0, ncol = 4))
colnames(ext_res6.5) <- colnames(ext_res6.4)[1:4]
v <-4
for(i in seq(from=3, to=ncol(ext_res6.4), by=3)) {
sl<-cbind(ext_res6.4[,c(1,2)], ext_res6.4[,c(i,v)])
ext_res6.5 = rbind(ext_res6.5, sl)
v<-v+3
if (i == 10) {
break
}
}
# CALCULATING CONC_PPB,CONC_MGKG AND STATUS OF CONCENTRATION LEVELS
ext_res6.5$LOQ <- NA #including LOQ to check against average intensity
ext_res6.5$First_Status <- NA
ext_res6.5$MinusBC_ppb<-NA
ext_res6.5$Conc_mgkg <- NA
ext_res6.5$Final_Status <- NA
rownames(ext_res6.5) = rownames(nrow(ext_res5)*10)
fz <-c(1:nrow(ext_res6.4))
for (f in seq(2, nrow(std_conc), by = 4)){
for(z in fz){
ext_res6.5[z,'LOQ']<- std_conc[f,16]#include a column for the LOQ for each heavy metal from standard concentration dataset.
if (is.na(ext_res6.5[z,4]==TRUE)){ #if value in column 4 (average intensity) is NA then put 0 in the corresponding row in column 3 (conc ppb)
ext_res6.5[z,3] <- 0
}else if((ext_res6.5[z,4] >= std_conc[f,16])== TRUE){# if value in column 4 is more than/equal to value in standard concentration column 16 (LOQ) then subtract that value from standard concentration column 14 (intercept) and divide by the slope (standard concentration column 13) then result in same row of conc ppb column.
ext_res6.5[z,3] = round(((ext_res6.5[z,4]-std_conc[f,14])/std_conc[f,13]),3)
ext_res6.5[z,'First_Status'] = "above LOQ"
}else if((ext_res6.5[z,4] < std_conc[f,16] & ext_res6.5[z,4] >= std_conc[f,15])== TRUE){# if value in column 4 is less than the value in standard concentration column 16 (LOQ) but more than LOD (standard concentration column 15) then subtract that value from standard concentration column 14 (intercept) and divide by the slope (standard concentration column 13) then result in same row of conc ppb column.
ext_res6.5[z,3] = round(((ext_res6.5[z,4]-std_conc[f,14])/std_conc[f,13]),3)
ext_res6.5[z,'First_Status'] = "below LOQ"
}else{(ext_res6.5[z,4] < std_conc[f,15])# if value in column 4 is less than value in standard concentration column 15 (LOD) then place 0 as the result in same row of conc ppb column.
ext_res6.5[z,3] = 0
ext_res6.5[z,'First_Status'] = "not detected"
}
}
#(print(c(f,z)))
if(f == nrow(std_conc)-3){
break
}
fz <- fz+nrow(ext_res6.4)
}
#subtracting conc ppb from black control to find final concentration
fz <-c(1:nrow(ext_res6.4))
bz = 1 #blank control concentration
for (ff in seq(2, nrow(std_conc), by = 4)){
for(zz in fz){
if (is.na(ext_res6.5[zz,3])|str_detect(ext_res6.5[zz,6], "not detected")==TRUE){#if row in column 3 or blank control is NA or it says "not detected" in column 6 then....
ext_res6.5[zz,'MinusBC_ppb'] <- 0 #put zero in MinusBC_ppb column
ext_res6.5[zz,'Conc_mgkg'] <- 0 #put 0 in Conc_mgkg column
ext_res6.5[zz,'Final_Status'] = "not detected"#put "not detected in final status column.
}else if (is.na(ext_res6.5[bz,3])==TRUE){#if blank control row is NA or if DW column then....
ext_res6.5[bz,3] <- 0 #replace NA with 0
ext_res6.5[zz,'Conc_mgkg'] <- 0 #put 0 in Conc-mg/kg column
ext_res6.5[zz,'Final_Status'] = "not detected"#put "not detected in final status column.
}else if((ext_res6.5[zz,3] < ext_res6.5[bz,3] & str_detect(ext_res6.5[zz,6], "above LOQ"))== TRUE){#if  row in column 3 is less than blank control in column 3 & it says above LOQ in column 6 then...
ext_res6.5[zz,'MinusBC_ppb'] <- 0 # put 0 in MinusBC_ppb column
ext_res6.5[zz,'Conc_mgkg'] <- paste(round(((ext_res6.5[zz,3]*100*5)/(ext_res6.5[zz,2]/1000)/1000),2),"BB") #paste the calculated concentration mg/kg using the Concentration ppb BEFORE subtracting blank control + BB (to indicate that this concentration is Below Blank)
ext_res6.5[zz,'Final_Status'] = "below blank"
}else if((ext_res6.5[zz,3] < ext_res6.5[bz,3] & str_detect(ext_res6.5[zz,6], "below LOQ"))== TRUE){#if  row in column 3 is less than blank control in column 3 & it says below LOQ in column 6 then...
ext_res6.5[zz,'MinusBC_ppb'] <- 0
ext_res6.5[zz,'Conc_mgkg'] <- paste(round(((ext_res6.5[zz,3]*100*5)/(ext_res6.5[zz,2]/1000)/1000),2),"BLOQ")#paste the calculated concentration mg/kg using the Concentration ppb BEFORE subtracting blank control + BLOQ (to indicate that this concentration is Below LOQ)
ext_res6.5[zz,'Final_Status'] = "below LOQ"
}else{
ext_res6.5[zz,'MinusBC_ppb']<- ext_res6.5[zz,3] - ext_res6.5[bz,3]#else subtract the concentration ppb from blank control.
ext_res6.5[zz,'Conc_mgkg'] <- round(((ext_res6.5[zz,7]*100*5)/(ext_res6.5[zz,2]/1000)/1000),2)#calculating conc mk/kg
ext_res6.5[zz,'Final_Status'] = "detected"
}
}
#(print(c(ff,zz,bz)))
if(ff == nrow(std_conc)-3){
break
}
bz<-bz+nrow(ext_res6.4)
fz <- fz+nrow(ext_res6.4)
}
#CHECK POINT 2 (check ext_res6.5) ----
#removing LOQ column
ext_res6.5 <-ext_res6.5[, -which(names(ext_res6.5) == "LOQ" )]
#MAKING DATASET BACK INTO WIDE FORMAT
ext_res7<- data.frame(matrix(nrow=nrow(ext_res6.4), ncol = 0))
u<-c(2:nrow(ext_res6.4))
k <- c(3:8)
for(i in seq(from=1, to=nrow(ext_res6.5), by=nrow(ext_res6.4))) {
s<-rbind(ext_res6.5[i,k], ext_res6.5[u,k])
ext_res7 = cbind(ext_res7, s)
u<-u+nrow(ext_res6.4)
#(print(i))
if (i == nrow(ext_res6.5)-nrow(ext_res6.4)+1) {
break
}
}
#adding back sample names and dry weight columns back to concentration dataset
ext_res7 = cbind(ext_res6.4[,c(1:2)], ext_res7)
ext_res7 = ext_res7[-1,] #this is used to remove the blank control row
#_______________________________________________________
#Adding back heavy metal names to column names to differentiate which columns describe which heavy metals FOR the FINAL DATASET
ext_res0[1,] <- gsub("[^[:alnum:]]","", ext_res0[1,])
ext_res0[1,] <- gsub("He","", ext_res0[1,])
excolnames<-ext_res0[1,][seq(2,ncol(ext_res0),3)]
colnames(ext_res7)[seq(7,ncol(ext_res7),6)] <- paste(excolnames,"(Conc_mg/kg)", sep = "")
colnames(ext_res7)[seq(3,ncol(ext_res7),6)] <- paste(excolnames,"(Conc_ppb)", sep = "")
colnames(ext_res7)[seq(4,ncol(ext_res7),6)] <- paste(excolnames,"(Avg.intensity)", sep ="")
colnames(ext_res7)[seq(5,ncol(ext_res7),6)] <- paste(excolnames,"(First_Status)", sep ="")
colnames(ext_res7)[seq(8,ncol(ext_res7),6)] <- paste(excolnames,"(Final_Status)", sep ="")
#FINAL EXTRACTION RESULTS USED FOR STATISTICAL ANALYSIS
ext_res7.6 <- ext_res7 #saving it into a new datset
#changing capital letters in the sample names to small letters in case there are any capital letters
for (row in 2:nrow(ext_res7.6)){
if (str_detect(ext_res7.6[row,1],"[[:upper:]]") == TRUE){
ext_res7.6[row,1] = tolower(ext_res7.6[row,1])
}else{
ext_res7.6[row,1] = ext_res7.6[row,1]
}
}
#TAKING OUT THE COLUMNS I DONT NEED
ext_res7.7 <- ext_res7.6 %>% select(-contains("ppb"))%>% select(-contains("intensity"))%>% select(-contains("Status"))
#SEPARATING ID NUMBER AND ADDING OTHER VARIABLES TO DATAFRAME
ext_res7.7$ID_num <- NA
ext_res7.7$Area <- NA
ext_res7.7$ Tissue <-NA
for (ro in 1:nrow(ext_res7.7)){
ext_res7.7$Area[ro]= substring(ext_res7.7[ro,1],1,2)
ext_res7.7$ Tissue[ro]=str_extract(ext_res7.7[ro,1], "(?<=_)[^_]+[^_]+[^_].*")
ext_res7.7$ ID_num[ro]=str_extract(ext_res7.7[ro,1], "(?<=_)[^_]*")
}
#____________________________________________________________
#ADDING BASIC SQUID INFORMATION FROM THE FISHING VESSEL AND LAB AND APPENDING TO BATCHES
#FOR SETTING UP CATCH DATA F0R SQUIDS MAKE SURE ID IS A CHARACTER
bi$ID <- as.character(bi$ID)
bi$Area <- as.character(bi$Area)
#AREA
#formatting samples names to match concentration dataset
bi1<-data.frame(t(apply(bi,1, sample_area_bi)))
binfo<-data.frame(t(apply(bi1,1, sample_id_bi)))
#ADDING BASIC INFO TO DATASET
ext_res7.7$Gender <- NA
ext_res7.7$Longitude <- NA
ext_res7.7$Latitude <- NA
ext_res7.7$Month_of_Capture <- NA
ext_res7.7$Mantle_length_mm <- NA
ext_res7.7$Wet_Weight_g <- NA
ext_res7.7$Maturity_level <- NA
h <- 1
while(h!= nrow(ext_res7.7)+1){
for (i in 1:nrow(binfo)){
if ((ext_res7.7$Area[h] == binfo$Area[i] && ext_res7.7$ID_num[h] == binfo$ID[i])==TRUE){
ext_res7.7$Longitude[h] <- binfo$Longitude[i]
ext_res7.7$Latitude[h] <- binfo$Latitude[i]
ext_res7.7$Month_of_Capture[h] <- binfo$Month_of_Capture[i]
ext_res7.7$Mantle_length_mm[h] <- binfo$Mantle_length_mm[i]
ext_res7.7$Wet_Weight_g[h] <- binfo$Wet_Weight_g[i]
# Check if Gender column exists.. Only females were caught for 2019 which is why no gender was included for 2019,
if ("Gender" %in% colnames(binfo)) { #0 = Females, 1 = Males
ext_res7.7$Gender[h] <- binfo$Gender[i]
} else{ # this means that if binfo doesnt have gender then it must be from 2019 catch data
ext_res7.7$Gender[h] <- 0
}
ext_res7.7$Maturity_level[h] <- binfo$Maturity_level[i]
print(paste('This is ext_res7.7', h,'and bi1', i))#tells you which row in the datasets match.
h <- h+1
if (h == nrow(ext_res7.7)+1){
break
}
}
}
}
#formatting samples names to match concentration dataset
dtl$Area. <- as.character(dtl$Area.)
dtl1<-data.frame(t(apply(dtl,1, sample_area_bi)))
#dtl2<-data.frame(t(apply(dtl1,1, dck)))
#ADDING distance to Argentina and Falkland Islands
ext_res7.7$dta_km <- NA
ext_res7.7$dtfl_km <- NA
h <- 1
while(h!= nrow( ext_res7.7)+1){
for (i in 1:nrow(dtl1)){
if (( ext_res7.7$Area[h] == dtl1$Area.[i])==TRUE){
ext_res7.7$dta_km[h] <- dtl1[i,4]
ext_res7.7$dtfl_km[h] <- dtl1[i,5]
print(paste('This is  ext_res7.7', h,'and dtl2', i))
h <- h+1
if (h == nrow( ext_res7.7)+1){
break
}
}
}
}
#Checking year based on ID numbers
if (26 %in% ext_res7.7$Area) {
ext_res7.7$Year<-2019
} else if(60 %in% ext_res7.7$Area){
ext_res7.7$Year<-2020
}else{
ext_res7.7$Year<-2021
}
#REARRANGING COLUMNS FOR FINAL DATASET
ext_res7.7=ext_res7.7[,c(1,2, 25, 13:16, 23:24 , 17:22, 3:12)]
#This is to use only keeping heavy metals names e.g "Fe" for as column names
colnames(ext_res7.7)[16:20] <- substring(colnames(ext_res7.7[16:20]),3,4)
colnames(ext_res7.7)[21:25] <- substring(colnames(ext_res7.7[21:25]),4,5)
#CHECK POINT 3 (check ext_res7.7)
ext_res7.7
#____________________________________________________________
#Final_HMresults_mgkg.csv"
#APPENDING FUTURE BATCHES TO MAKE ONE EXTRACTION RESULTS FILE
Final_res = "Datasets/Results/Final_HMresults_mgkg.csv"
write.table(ext_res7.7, file = Final_res, sep = ",",
append = TRUE, quote = FALSE,
col.names = TRUE, row.names = FALSE) #CHANGE COLUMN NAMES TO FALSE AFTER PROCESSING FIRST BATCH
return( list(Results=ext_res7.7,squid_catch_data=binfo, distance_to_land=dtl1))
}
# STEP 5: RUNNING MAIN FUNCTION WITH REQUIRED DATASETS----
heavy_metals_concentration_dataset <- preprocessed_heavy_metals_concentration_dataset(standard_concentration, dry_weight, squid_info, distance_to_land)
View(heavy_metal_batch)
View(heavy_metals_concentration_dataset)
standard_concentration <- standard_concentration_calculation(heavy_metal_batch)
# STEP 5: RUNNING MAIN FUNCTION WITH REQUIRED DATASETS----
heavy_metals_concentration_dataset <- preprocessed_heavy_metals_concentration_dataset(standard_concentration, dry_weight, squid_info, distance_to_land)
View(heavy_metal_batch)
View(heavy_metals_concentration_dataset)
heavymetals_data <- read.csv("Final_Results_From_Task 1/Final_HMresults_mgkg.csv", header = TRUE)
datasets_for_heavy_metals_data_distribution <- process_dataset_for_data_distribution(heavymetals_data, keep_LOQ_values = FALSE)
#Data Processor Function before doing analysis
process_dataset_for_data_distribution <- function(data, keep_LOQ_values=FALSE) {
# Check if the dataset is Heavy Metals (Ag is in the 16th column)
if (grepl("Fe|Ag", colnames(data)[16])) {
# Processing for Heavy Metals dataset
data <- data %>%
relocate(1:15, colnames(data)[16:25]) %>%
mutate(across(4, ~ paste0(., ".")))  # Add "." to column 4
# FUNCTIONS TO HELP MODIFY ID NUMBERS FOR FURTHER ANALYSIS (HM)
ID_num_modifier <- function(x){#padding 0 to first two digits
if (str_detect(substring(x[4],1,2),"\\.") == TRUE){
sk=paste('0',substring(x[4],1,))
sk<- gsub(" ", "",  sk)
x[4] <- gsub(substring(x[4],1,), sk,  x[4])
}
return(x)
}
# Apply the 'ID_num_modifier' function and remove "." from the 'Area' column for data version 1 with numerical values as concentrationentrations
data1 <- as.data.frame(t(apply(data, MARGIN = 1, ID_num_modifier)))
data$ID_num <- gsub("\\.", "", data$ID_num)
# Apply the 'ID_num_modifier' function and remove "." from the 'Area' column for data version 2 with classification groups (categorical values) representing concentration values
data2 <- as.data.frame(t(apply(data, MARGIN = 1, ID_num_modifier)))
data2$ID_num <- gsub("\\.", "", data2$ID_num)
if(keep_LOQ_values == FALSE){
cat("The LOQ values were replaced with 0.\n")
# Replace "BLOQ" values with 0 in the relevant columns (16:25)
data1[, 16:25] <- lapply(data1[, 16:25], gsub, pattern = ".*BLOQ.*", replacement = 0)
data1[,c(16:25)] <- lapply(data1[,c(16:25)], gsub, pattern = ".*BB.*", replacement = 0)
data1[,c(16:25)] <- lapply(data1[,c(16:25)], gsub, pattern = "^0$", replacement = 0)
data1[,c(16:25)]  <- lapply(data1[,c(16:25)] , gsub, pattern = "N/A", replacement = 0)
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = ".*BLOQ.*", replacement = 'BLOQ')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = ".*BB.*", replacement = 'BLOQ')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = "^0$", replacement = 'Not_detected')
data2[,c(16:25)]  <- lapply(data2[,c(16:25)] , gsub, pattern = "N/A", replacement = 'Not_detected')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = "[0-9.]+", replacement = "Detected")
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}else{
# Removing "BLOQ" and "BB" values in the relevant columns (16:25)
data1[, 16:25] <- lapply(data1[, 16:25], gsub, pattern = " BLOQ", replacement = "")
data1[,c(16:25)] <- lapply(data1[,c(16:25)], gsub, pattern = " BB", replacement = "")
data1[,c(16:25)] <- lapply(data1[,c(16:25)], gsub, pattern = "^0$", replacement = 0)
data1[,c(16:25)]  <- lapply(data1[,c(16:25)] , gsub, pattern = "N/A", replacement = 0)
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = ".*BLOQ.*", replacement = 'BLOQ')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = ".*BB.*", replacement = 'BLOQ')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = "^0$", replacement = 'Not_detected')
data2[,c(16:25)]  <- lapply(data2[,c(16:25)] , gsub, pattern = "N/A", replacement = 'Not_detected')
data2[,c(16:25)] <- lapply(data2[,c(16:25)], gsub, pattern = "[0-9.]+", replacement = "Detected")
process_with_user_input <- function() {
# Ask the user if they want to keep LOQ values
keep_loq <- readline(prompt = "Do you want to keep the original LOQ values? (yes/no): ")
if (tolower(keep_loq) == "yes") {
cat("You chose to keep LOQ values.\n")
return("Keep LOQ") # Return a clear message indicating the choice
} else if (tolower(keep_loq) == "no") {
multiplier <- NA
while (is.na(multiplier)) {
user_input <- readline(prompt = "What number do you want to multiply the LOQ values by? ")
multiplier <- suppressWarnings(as.numeric(user_input))
if (is.na(multiplier)) {
cat("Invalid input. Please enter a numeric value.\n")
}
}
cat("You chose a multiplier of ", multiplier, ".\n")
return(multiplier) # Return the chosen multiplier
} else {
cat("Invalid input. Please answer with 'yes' or 'no'.\n")
return(NULL) # Return NULL for invalid input
}
}
# To get user input for
user_choice <- process_with_user_input()
# Modify "BLOQ" and "BB" values with userinput in the relevant columns (16:25)
process_data <- function(data, multiplier) {
# Validate user input
if (is.na(multiplier)) {
stop("Invalid multiplier. Please enter a numeric value.")
}
# Process the data
data[, 16:25] <- lapply(data[, 16:25], function(column) {
# Replace " BLOQ" and " BB" with empty strings
cleaned_column <- gsub(" BLOQ", "", column)
cleaned_column <- gsub(" BB", "", cleaned_column)
# Convert to numeric
numeric_column <- as.numeric(cleaned_column)
# Multiply by the user input
if (is.numeric(multiplier)){
result_column <- numeric_column * multiplier
return(result_column)
}else{
return (numeric_column)
}
})
# Return the updated dataset
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}
data <-process_data(data, user_choice)
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}
} else {
# Processing for Organic Compounds dataset
data <- data %>%
relocate(Area, .after = ID_num) %>%
mutate(across(4, ~ paste0(., ".")))  # Add "." to column 4
# Convert column 6 to lowercase
data[, 6] <- tolower(data[, 6])
# FUNCTIONS TO HELP MODIFY ID NUMBERS FOR FURTHER ANALYSIS (HM)
ID_num_modifier <- function(x){#padding 0 to first two digits
if (str_detect(substring(x[4],1,2),"\\.") == TRUE){
sk=paste('0',substring(x[4],1,))
sk<- gsub(" ", "",  sk)
x[4] <- gsub(substring(x[4],1,), sk,  x[4])
}
return(x)
}
# Apply the 'ID_num_modifier' function and remove "." from the 'Area' column for data version 1 with numerical values as concentrations
data1 <- as.data.frame(t(apply(data, MARGIN = 1, ID_num_modifier)))
data1$ID_num <- gsub("\\.", "", data1$ID_num)
# Apply the 'ID_num_modifier' function and remove "." from the 'Area' column for data version 2 with classification groups representing concentration values
data2 <- as.data.frame(t(apply(data, MARGIN = 1, ID_num_modifier)))
data2$ID_num <- gsub("\\.", "", data2$ID_num)
if(keep_LOQ_values == FALSE){
cat("The LOQ values were replaced with 0.\n")
# Replace "BLOQ", "N/A", and "0" values with 0 in the relevant columns (16:19)
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = ".*BLOQ.*", replacement = 0)
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = "N/A", replacement = 0)
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = "^0$", replacement = 0)
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = ".*BLOQ.*", replacement = 'BLOQ')
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = "^0$", replacement = 'Not_detected')
data2[,c(16:19)]  <- lapply(data2[,c(16:19)] , gsub, pattern = "N/A", replacement = 'Not_detected')
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = "[0-9.]+", replacement = "Detected")
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}else{
# Removing "BLOQ" and  values in the relevant columns (16:19)
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = " BLOQ", replacement = "")
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = "N/A", replacement = 0)
data1[, 16:19] <- lapply(data1[, 16:19], gsub, pattern = "^0$", replacement = 0)
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = ".*BLOQ.*", replacement = 'BLOQ')
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = "^0$", replacement = 'Not_detected')
data2[,c(16:19)]  <- lapply(data2[,c(16:19)] , gsub, pattern = "N/A", replacement = 'Not_detected')
data2[,c(16:19)] <- lapply(data2[,c(16:19)], gsub, pattern = "[0-9.]+", replacement = "Detected")
process_with_user_input <- function() {
# Ask the user if they want to keep LOQ values
keep_loq <- readline(prompt = "Do you want to keep LOQ values? (yes/no): ")
if (tolower(keep_loq) == "yes") {
cat("You chose to keep LOQ values.\n")
return("Keep LOQ") # Return a clear message indicating the choice
} else if (tolower(keep_loq) == "no") {
multiplier <- NA
while (is.na(multiplier)) {
user_input <- readline(prompt = "What number do you want to multiply the LOQ values by? ")
multiplier <- suppressWarnings(as.numeric(user_input))
if (is.na(multiplier)) {
cat("Invalid input. Please enter a numeric value.\n")
}
}
cat("You chose a multiplier of ", multiplier, ".\n")
return(multiplier) # Return the chosen multiplier
} else {
cat("Invalid input. Please answer with 'yes' or 'no'.\n")
return(NULL) # Return NULL for invalid input
}
}
# To get user input for
user_choice <- process_with_user_input()
# Modify "BLOQ" and "BB" values with userinput in the relevant columns (16:25)
process_data <- function(data, multiplier) {
# Validate user input
if (is.na(multiplier)) {
stop("Invalid multiplier. Please enter a numeric value.")
}
# Process the data
data[, 16:19] <- lapply(data[, 16:19], function(column) {
# Replace " BLOQ" and " BB" with empty strings
cleaned_column <- gsub(" BLOQ", "", column)
#cleaned_column <- gsub(" BB", "", cleaned_column)
# Convert to numeric
numeric_column <- as.numeric(cleaned_column)
# Multiply by the user input
if (is.numeric(multiplier)){
result_column <- numeric_column * multiplier
return(result_column)
}else{
return (numeric_column)
}
})
# Return the updated dataset
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}
data <-process_data(data, user_choice)
return(list(dataset_with_numerical_values=data1, dataset_with_categorical_values=data2))
}
}
}
heavymetals_data <- read.csv("Final_Results_From_Task 1/Final_HMresults_mgkg.csv", header = TRUE)
datasets_for_heavy_metals_data_distribution <- process_dataset_for_data_distribution(heavymetals_data, keep_LOQ_values = FALSE)
# Data Processing for Organic Compounds dataset
organiccompounds_data <- read.csv("Final_Results_From_Task 1/Final_OCresults_mgkg.csv", header = TRUE)
datasets_for_organic_compounds_data_distribution <- process_dataset_for_data_distribution(organiccompounds_data, keep_LOQ_values = FALSE)
datasets_for_heavy_metals_data_distribution <- process_dataset_for_data_distribution(heavymetals_data, keep_LOQ_values = FALSE)
datasets_for_heavy_metals_data_distribution <- process_dataset_for_data_distribution(heavymetals_data, keep_LOQ_values = TRUE)
View(datasets_for_heavy_metals_data_distribution)
datasets_for_heavy_metals_data_distribution[["dataset_with_numerical_values"]]
